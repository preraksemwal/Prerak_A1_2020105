----------    q1_fork.c   ------------------------

DESCRIPTION:

fork() system call => when we call this system call it creates a child program of the parent process with a totally separtae memory space.
                      Also when this system call is invoked it also return a value, which for the parent process is positive but zero for child process.
                      This differnce is used to distinguish whether a piece of code is excecuted in a parent or child process.
open() system call => open system call is used to open a file from the file system of differnt types. Each file is assocoated to an id called the FILE DESCRIPTOR,
                      which allows us to distinguish betwwen differnet file streams. By default values 0,1,2 are assigned to stdin,stdout,stderr respectively.
                      It takes three arguments - int file_descriptor, 








Handling error cases: we will use  perror()  method whenver we encounter an error/failure

fopen()           =>  whenever we open a file fopen() will return a value of -1 if it falis to do so, it might be due to file not in the same directory, or some other failure too.
fork()            =>  whenever fork() system call fails during forking of the current process it returns a negative value
pthread_create()  =>  whenver pthread_create() system call fails to create a thread it returns value -1 and hence we exploit this to capture if this happens.
                      This can happen due to many kernel level complications
